<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Dailies on SMSLIT</title>
		<link>https://www.smslit.top/daily/</link>
		<description>Recent content in Dailies on SMSLIT</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Mon, 18 Mar 2019 21:21:06 +0800</lastBuildDate>
		<atom:link href="https://www.smslit.top/daily/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>日书-投怀 Vue</title>
			<link>https://www.smslit.top/daily/daily-vue-vue-vue/</link>
			<pubDate>Mon, 18 Mar 2019 21:21:06 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/daily-vue-vue-vue/</guid>
			<description>说来太巧了，从前天晚上开始看 Vue 官网教程学习 Vue，今天就发现卖桃君在公众号发了宣布极客时间新推出 Vue 视频教程进行大甩卖的文章，只感叹这就是一个</description>
			<content type="html"><![CDATA[<p>说来太巧了，从前天晚上开始看 Vue 官网教程学习 Vue，今天就发现卖桃君在公众号发了宣布极客时间新推出 Vue 视频教程进行大甩卖的文章，只感叹这就是一个“阴谋”！因为之前订阅了戴铭老师的《iOS 开发高手课》的教程，感受到了极客时间对于教程质质量的把控，所以应自己所需，立马剁手订阅了唐金州老师<sup class="footnote-ref" id="fnref:Ant-Design-Vue"><a href="#fn:Ant-Design-Vue">1</a></sup>的《Vue 开发实战》的课程，可惜甩卖活动不能使用之前的 30 刀的券，但无所谓了，优良的知识是无价的，这些投资是有必要的！如果您也想了解一下课程，扫码就看：</p>

<figure>
    <img src="https://pichome-1254392422.cos.ap-chengdu.myqcloud.com/img/2019-03-18-06ffd0319ac755538a585fa74e9e035e.jpg" width="300px"/> 
</figure>

<div class="footnotes">

<hr />

<ol>
<li id="fn:Ant-Design-Vue">一点资讯前端技术专家，Ant Design Vue 的作者 <a class="footnote-return" href="#fnref:Ant-Design-Vue"><sup>[return]</sup></a></li>
</ol>
</div>
]]></content>
		</item>
		
		<item>
			<title>日书-头号玩家</title>
			<link>https://www.smslit.top/daily/daily-ready-player-one/</link>
			<pubDate>Sun, 17 Mar 2019 22:55:12 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/daily-ready-player-one/</guid>
			<description>昨天和今天终于看完了斯皮尔伯格的新电影《头号玩家》，也不算新电影了，因为上映了都一年多了，尴尬！两个多小时的电影花两天看完不过分吧，还是说说</description>
			<content type="html"><![CDATA[<p>昨天和今天终于看完了斯皮尔伯格的新电影《头号玩家》，也不算新电影了，因为上映了都一年多了，尴尬！两个多小时的电影花两天看完不过分吧，还是说说观后感吧！这部电影应该是会给某一代人带来猛烈回忆杀的，很羞愧的说，只有红白机游戏和一些动漫形象对十里有点&rdquo;伤害&rdquo;，童年记忆嘛，电影里那些像素游戏也没怎么玩过😅！十里对电影中那句 “The reality is the only thing that&rsquo;s real” 记忆尤为深刻，现实是唯一的真实！虚幻之外，游戏之外，身边的人、物、景才是最真实的，拥抱生活，感受生活的人情感和状态才会是饱满的，这又让十里想到专注之余能自由穿梭于自己的世界与现实世界是多么的重要！</p>

<p>除了电影特效带来的快感，十里还惊叹于男主是那么的了解绿洲的缔造者，每个细节的那种默契跨越了年龄，也跨越了虚拟与现实，时间与空间都无法掩盖两个人的相同关注点！那么世界上真的会存在如此了解你并与你很合拍的人吗？</p>
]]></content>
		</item>
		
		<item>
			<title>日书-关于 macOS 开发知识分享</title>
			<link>https://www.smslit.top/daily/daily-macOS-dev-plan-change/</link>
			<pubDate>Sat, 16 Mar 2019 23:56:00 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/daily-macOS-dev-plan-change/</guid>
			<description>已经有好些天没有发 macOS 开发的经验分享了，考虑到现阶段时间的紧俏，更改知识分享周期为 weekly。其实每一篇分享背后，十里要做很多工作，十里想着</description>
			<content type="html"><![CDATA[<p>已经有好些天没有发 macOS 开发的经验分享了，考虑到现阶段时间的紧俏，更改知识分享周期为 weekly。其实每一篇分享背后，十里要做很多工作，十里想着要尽量能说清楚做什么，怎么做，为什么（what-how-why），能力有限，时间就会占用很多，毕竟还要做很多其他事情，索性 《macOS 开发》(博客和知乎专栏)就成了《macOS Development weekly》，哈哈！</p>

<p>关于经验分享，还是想尽量时新，参照网上老旧的开发经验也要关注和探索技术的更新，就比如十里下一篇要讲的本地通知，网上提供的方法大多是马上要废弃的方式，阅读 apple 官方关于 Notification 的开发资料才知道未来 API 的发展方向，去年 WWDC 已经很清楚说了 iOS 应用移植到 macOS 的计划，作为开发者也应注意到了 apple 正努力融合 iOS 和 macOS 开发接口，得时刻关注动向，才能让自己的作品与时俱进！知识经验的分享也便能时新！</p>
]]></content>
		</item>
		
		<item>
			<title>鸭子类型是什么鬼</title>
			<link>https://www.smslit.top/daily/daily-duck-type/</link>
			<pubDate>Fri, 15 Mar 2019 23:44:26 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/daily-duck-type/</guid>
			<description>刚刚看到 《Python Vs Go，鸭子类型，你有我也有》 了解到 鸭子类型，刚看到标题的时候，怪怪的，这是个什么鬼类型！而且总感觉 PegasusWang 稍微开了开车，哈</description>
			<content type="html"><![CDATA[<p>刚刚看到 <a href="https://zhuanlan.zhihu.com/p/59299729" target="_blank">《Python Vs Go，鸭子类型，你有我也有》</a> 了解到 <strong>鸭子类型</strong>，刚看到标题的时候，怪怪的，这是个什么鬼类型！而且总感觉 <a href="https://www.zhihu.com/people/pegasus-wang/activities" target="_blank">PegasusWang</a> 稍微开了开车，哈哈！</p>

<p>在程序设计中，鸭子类型（英语：duck typing）是动态类型的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由&rdquo;当前方法和属性的集合&rdquo;决定。这个概念的名字来源于由James Whitcomb Riley提出的鸭子测试，“鸭子测试”可以这样表述：</p>

<blockquote>
<p>当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。<sup class="footnote-ref" id="fnref:https-zh-wikiped"><a href="#fn:https-zh-wikiped">1</a></sup></p>
</blockquote>

<p>很明显在这里，我们更关注的是对象的行为而不是它们的类型。</p>

<p>举个🌰，定义一个鸭子类，其有个 <strong>叫</strong> 方法，在定义一个人类(有一种男人被称为“🦆”)，他也有 <strong>叫</strong> 的方法，总感觉好搞笑！这里我们就可以认为它们都有叫的方法，都是鸭子的行为，所以都是鸭子！Python 试一下：</p>
<div class="highlight"><pre class="chroma"><code class="language-Python" data-lang="Python"><span class="k">class</span> <span class="nc">Duck</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

    <span class="k">def</span> <span class="nf">quack</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;呱呱&#34;</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Man</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

    <span class="k">def</span> <span class="nf">quack</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;女王大人&#34;</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">do_quack</span><span class="p">(</span><span class="n">ducker</span><span class="p">):</span>
    <span class="n">ducker</span><span class="o">.</span><span class="n">quack</span><span class="p">()</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">d</span> <span class="o">=</span> <span class="n">Duck</span><span class="p">(</span><span class="s1">&#39;duck&#39;</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">Man</span><span class="p">(</span><span class="s1">&#39;man&#39;</span><span class="p">)</span>
    <span class="n">do_quack</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
    <span class="n">do_quack</span><span class="p">(</span><span class="n">m</span><span class="p">)</span></code></pre></div>
<p><a href="https://www.zhihu.com/people/pegasus-wang/activities" target="_blank">PegasusWang</a> 还用 Go 语言试了一下，使用了 interface 特性，咦！这与 swift 语言中的协议(protocol) 很像嘛，那咱用 swift 实现一下：</p>
<div class="highlight"><pre class="chroma"><code class="language-Swift" data-lang="Swift"><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="kd">protocol</span> <span class="nc">Ducker</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">quack</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Duck</span><span class="p">:</span> <span class="n">Ducker</span> <span class="p">{</span>
    
    <span class="kd">var</span> <span class="nv">name</span><span class="p">:</span> <span class="nb">String</span>
    
    <span class="kd">init</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">name</span> <span class="p">=</span> <span class="n">name</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">quack</span><span class="p">()</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;呱呱&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Man</span><span class="p">:</span> <span class="n">Ducker</span> <span class="p">{</span>
    
    <span class="kd">var</span> <span class="nv">name</span><span class="p">:</span> <span class="nb">String</span>
    
    <span class="kd">init</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">name</span> <span class="p">=</span> <span class="n">name</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">quack</span><span class="p">()</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;女王大人&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">doQuack</span><span class="p">(</span><span class="n">ducker</span><span class="p">:</span> <span class="n">Ducker</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ducker</span><span class="p">.</span><span class="n">quack</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">d</span> <span class="p">=</span> <span class="n">Duck</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&#34;duck&#34;</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">m</span> <span class="p">=</span> <span class="n">Man</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&#34;man&#34;</span><span class="p">)</span>

<span class="n">doQuack</span><span class="p">(</span><span class="n">ducker</span><span class="p">:</span> <span class="n">d</span><span class="p">)</span>
<span class="n">doQuack</span><span class="p">(</span><span class="n">ducker</span><span class="p">:</span> <span class="n">m</span><span class="p">)</span></code></pre></div>
<p>最终我们都能听见 duck 和 man 的叫声，Nice！</p>
<div class="highlight"><pre class="chroma"><code class="language-Bash" data-lang="Bash">呱呱
女王大人</code></pre></div><div class="footnotes">

<hr />

<ol>
<li id="fn:https-zh-wikiped">在鸭子类型中，关注点在于对象的行为，能作什么；而不是关注对象所属的类型。&ndash;<a href="https://zh.wikipedia.org/wiki/鸭子类型" target="_blank">鸭子类型</a> <a class="footnote-return" href="#fnref:https-zh-wikiped"><sup>[return]</sup></a></li>
</ol>
</div>
]]></content>
		</item>
		
		<item>
			<title>日书-很对味的收获</title>
			<link>https://www.smslit.top/daily/daily-amazing-ui-component/</link>
			<pubDate>Fri, 15 Mar 2019 22:05:11 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/daily-amazing-ui-component/</guid>
			<description>今天看 Jason 博客文章，收获挺多。 首先是解决了最近一直纠结的问题，web 开发前后端分离的技术栈的选择，看了很多 angular\rect\vue 大战的文章，但最终还是受教于 Jason 选择</description>
			<content type="html"><![CDATA[<p>今天看 <a href="https://atjason.com" target="_blank">Jason</a> 博客文章，收获挺多。</p>

<p>首先是解决了最近一直纠结的问题，web 开发前后端分离的技术栈的选择，看了很多 angular\rect\vue 大战的文章，但最终还是受教于 Jason 选择了 Flask + Vue + Element 的技术栈，严格地说应该是 Flask + Vue，Element 是一个非常棒的 UI 组件库，天生与 Vue 配套，除了省很多学习成本，还因为真的喜欢 Element 的 UI 风格，棒棒的！Vue 学习ing&hellip;</p>

<p>关于《不能复制时间的事，少做》还是有些启发的，为了发挥自己的价值，尽量把时间花在更有广泛影响力的产品或事情上，当然这与<strong>利基市场</strong>也不会冲突！服务小众，最大化自己的价值！</p>

<p>PS: 学了一下午的 Vue，真的很对味口，道不出的一种舒服！</p>
]]></content>
		</item>
		
		<item>
			<title>日书-君子爱财，取之有道</title>
			<link>https://www.smslit.top/daily/daily-money-money-lie/</link>
			<pubDate>Thu, 14 Mar 2019 23:57:09 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/daily-money-money-lie/</guid>
			<description>今天看了一期米奇沃克斯的 Vlog 《当产品融资变得如此随意，打工族怎么活？》，里面他描述了自己的一些购买融资产品经历以及合作经历，其中一个很夸张的例</description>
			<content type="html"><![CDATA[<p>今天看了一期米奇沃克斯的 Vlog 《当产品融资变得如此随意，打工族怎么活？》，里面他描述了自己的一些购买融资产品经历以及合作经历，其中一个很夸张的例子就是一群高市场和营销的非技术人员拿一款语音产品（bug 满满）通过融资的方式敛财十几亿人民币，由此米奇沃克斯阐述了一些自己的思考。赚钱的方式有很多种，而很多人通过快速敛财的方式，来投资洗白，尤其是在国外融资的，往往就是在搞臭中国人的口碑，这其实是对一个正常融资环境的污染，这让那些想做好产品又只能靠融资发展的个体或公司身处一个并不公平的竞争条件下，也扼杀了一些好的创意和产品！</p>

<p>米奇沃克斯在视频最后说到，真的希望会出现一些并不是以赚钱为目的的人出现&hellip;十里觉得君子爱财取之有道，他这种期待应该补充一下：真的希望多出现一些愿意做好产品并且能对消费者负责人的人或公司出现，赚钱要让消费者觉得值得，最起码要等价交换，让消费者有超值回报感最好！</p>

<p>想起了农村里村干部的事情，从小就觉得村干部贪得无厌，很多人削尖了脑袋要往里钻！这些人蝇营狗苟，看到的只是钱途，却没有觉得当上村干部身上多了一个重担，缺少对村民负责的意识！个人觉得没有绝对大公无私的好村官，也不会抱以期待这种人的出现。但一定存在很智慧得民心的干部，他们为人民办实事，给村民挣福利，同时合理利用自己身份优势经营自己的事业！</p>

<p>PS: 理想还是要有的，但需要让现实来调剂！</p>
]]></content>
		</item>
		
		<item>
			<title>日书-别致的音乐盒</title>
			<link>https://www.smslit.top/daily/daily-music-box-share-to-you/</link>
			<pubDate>Wed, 13 Mar 2019 22:17:49 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/daily-music-box-share-to-you/</guid>
			<description>不知道大家平常用不用网易云音乐，如果您是软件开发人员并且使用 vscode 的话，向您推荐一个 vscode 插件-VSC Netease Music!不过今天十里真正要分享的是一个命</description>
			<content type="html"><![CDATA[<p>不知道大家平常用不用网易云音乐，如果您是软件开发人员并且使用 vscode 的话，向您推荐一个 vscode 插件-<a href="https://github.com/nondanee/vsc-netease-music" target="_blank">VSC Netease Music</a>!不过今天十里真正要分享的是一个命令行下的网易云音乐客户端，喜欢在终端搬砖又要听音乐的同胞的开心与喜悦呀！其实十里已经用了两年多了，感觉挺不错的，有必要分享出来，感谢作者！它就是 <a href="https://github.com/darknessomi/musicbox" target="_blank">darknessomi/musicbox</a> ，因为作者使用 python 实现并且托到了 pip，所以安装很简单。</p>

<blockquote>
<p>高品质网易云音乐命令行版本，简洁优雅，丝般顺滑，基于Python编写</p>
</blockquote>

<p>在 macOS 下安装只需要安装一个依赖，然后安装 musicbox ，开箱即用：</p>
<div class="highlight"><pre class="chroma"><code class="language-Bash" data-lang="Bash"><span class="c1"># 安装依赖</span>
brew install mpg123
<span class="c1"># 安装 musicbox</span>
pip3 install NetEase-MusicBox
<span class="c1"># 运行 musicbox</span>
musicbox</code></pre></div>
<p>音乐盒的操作倾向 vim 使用者的操作习惯：</p>

<figure>
    <img src="https://pichome-1254392422.cos.ap-chengdu.myqcloud.com/img/20190314103710.png" width="70%"/> 
</figure>

]]></content>
		</item>
		
		<item>
			<title>日书-多走弯路就是捷径</title>
			<link>https://www.smslit.top/daily/daily-study-style-not-bad/</link>
			<pubDate>Tue, 12 Mar 2019 22:57:33 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/daily-study-style-not-bad/</guid>
			<description>记得在之间就职的公司做嵌入式开发的时候，临危受命接手其他部门的蓝牙开发，时间紧迫的情况下，还是决定好好熟悉平台了解运行原理和官方推荐开发路线</description>
			<content type="html"><![CDATA[<p>记得在之间就职的公司做嵌入式开发的时候，临危受命接手其他部门的蓝牙开发，时间紧迫的情况下，还是决定好好熟悉平台了解运行原理和官方推荐开发路线后，再根据需求完成程序。其实完全可以像其它同事一样直接硬着头皮改动现有程序，但还是没这么做，在几个星期内加班熬夜拼了老命，把整个开发流程和蓝牙 4.2 协议栈的基础都好好学了一遍，然后拖了 deadline 几天按照 TI 官方推荐的方式完成了从 0 到 1 的程序，万幸！问题是还让我发现了个蓝牙芯片的硬件 bug，真的受不了各种连环坑！</p>

<p>有些人可能就觉得我这是何必呢！直接在别人写了一半的程序上修改不就好了！不好，那个时候我一无所知，等了解一点所以然之后，发现之前同事写的程序有很多不太合理的地方，所以就成了上面所说的结果了！是的，短时间内学一个新的平台真的挺耗神的，但是这会夯实一定基础，后面再有什么新的需求，可以轻易应付了，正所谓长痛不如短痛！</p>

<p>好处的直接表现就是：几天后另外一个部门的蓝牙程序委托给我，我不到一天就帮他们写好了！</p>

<p>总结下来就是：</p>

<blockquote>
<p>多走弯路就是捷径！</p>
</blockquote>

<p>为什么会突然想起之前这个蓝牙程序开发的事情呢！是因为前段时间花了些精力学习了 falsk 框架下的 web 后端开发，当时却是花了不少时间了解了大部分的内容，以至于昨天花了不到一个小时就为一位留学的朋友方便查班车用的极小的 web 应用，方便其在 iphone 上借助<strong>快捷指令</strong> app 查班车！再一次证明了上面这一点！</p>
]]></content>
		</item>
		
		<item>
			<title>日书-又‘无脑’订阅了一个课程</title>
			<link>https://www.smslit.top/daily/daily-new-discovery-power-man/</link>
			<pubDate>Mon, 11 Mar 2019 22:31:33 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/daily-new-discovery-power-man/</guid>
			<description>今天在看卖桃君的极客时间时发现了一个大🐂，很“不理智”地订阅了他的课程《iOS 开发高手课-从原理到实战，带您解决80%的开发难题》，作者是前</description>
			<content type="html"><![CDATA[<figure class="right">
    <img src="https://pichome-1254392422.cos.ap-chengdu.myqcloud.com/img/20190311224911.PNG"/> 
</figure>


<p>今天在看卖桃君的<a href="https://time.geekbang.org" target="_blank">极客时间</a>时发现了一个大🐂，很“不理智”地订阅了他的课程《iOS 开发高手课-从原理到实战，带您解决80%的开发难题》，作者是前滴滴出行技术专家——戴铭，其实十里并没有太 care 他的头衔，订阅的原因有三点吧。</p>

<ul>
<li>从原理出发，那就是除了讲其然，还会说其所以然，喜欢这种打破砂锅的出发点！渔优于鱼，不是吗？iOS 与 macOS 本是同宗，有助于理解 macOS 开发！</li>
<li>iOS 方面的开发自己有涉足过，虽然现在还没啥像样的作品（多年前只做过两个蓝牙通信控制外设的小 app），但是还是有计划要继续的，既然现在有一个会结合实际讲开发的菜，何不尝尝！</li>
<li>作者精心准备了很多插图，可以说是很用心了，很喜欢其画风，去作者博客<a href="https://ming1016.github.io" target="_blank">星光社 - 戴铭的博客</a>看了看，有幸看到其在去年 swift 大会准备的 PPT，通过插图讲述技术是个很好的思路呢，佩服会画插图的程序猿(目标)，右边插图感受一下！</li>
</ul>

<p>我是不会告诉你，最重要的是第三点的！</p>

<p>真的很佩服能够全面发展自己的人，兴趣还算广泛的十里，会以这些牛人为榜样，加油追赶！PS: 今天与水木一起做了好吃的不得了的麻辣香锅，很开心！</p>

<p>如果您也想订阅课程，请看：</p>

<figure>
    <img src="https://pichome-1254392422.cos.ap-chengdu.myqcloud.com/img/20190311230011.jpg" width="300px"/> 
</figure>

]]></content>
		</item>
		
		<item>
			<title>日书- vim 仍然是我的利器</title>
			<link>https://www.smslit.top/daily/daily-vim-renormal/</link>
			<pubDate>Sun, 10 Mar 2019 22:49:00 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/daily-vim-renormal/</guid>
			<description>之前对 vim 生气了，是因为在编辑 markdown 文档的时候，` 简直是鬼魂般的存在，一会显示一会儿消失，常态是看不到这个反撇号，文档中还会经常使用到这个，用 vim 写</description>
			<content type="html"><![CDATA[<p>之前对 vim 生气了，是因为在编辑 markdown 文档的时候，` 简直是鬼魂般的存在，一会显示一会儿消失，常态是看不到这个反撇号，文档中还会经常使用到这个，用 vim 写文章太让人抓狂了！今天提起性子决定要查一下到底是怎么回事儿，之前发现的是只有编辑 markdown 的时候才会出现这个情况，其它文件类型都正常显示，说明这不是 vim 的锅，一定是插件或配置搞的鬼！我只好用笨办法，插件一个一个的卸载，最终查到原来是 <code>Yggdroot/indentLine</code> 这个插件导致，想到这个插件也就是在编辑代码的时候有点用处，就添加了一个屏蔽配置，当打开文件是 markdown 的时候就禁用这个插件：</p>
<div class="highlight"><pre class="chroma"><code class="language-vim" data-lang="vim"><span class="c">&#34; 解决 indentline 导致 markdown 文件无法正常显示 `` 的问题</span><span class="err">
</span><span class="err"></span><span class="nx">autocmd</span> <span class="nx">FileType</span> <span class="nx">markdown</span><span class="p">,</span><span class="nx">md</span> <span class="k">let</span> <span class="nx">g</span><span class="p">:</span><span class="nx">indentLine_enabled</span> <span class="p">=</span> <span class="m">0</span></code></pre></div>
<p>另外，在查找上述问题的过程中，还发现了一个小问题，vim 会把我的 markdown 文件当 liquid 类型，到是对编辑文章的时候的语法高亮影响不大，但就是被我发现了在代码块的高亮上有影响，这也是不能忍的，继续屏蔽：</p>
<div class="highlight"><pre class="chroma"><code class="language-vim" data-lang="vim"><span class="c">&#34; 解决插件将 md 或 markdown 误以为 liquid 的问题</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span><span class="p">:</span><span class="nx">polyglot_disabled</span> <span class="p">=</span> [<span class="s1">&#39;liquid&#39;</span>]</code></pre></div>
<p>现在舒服多了，vim 依旧棒棒哒！</p>
]]></content>
		</item>
		
	</channel>
</rss>
