<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Dailies on SMSLIT</title>
		<link>https://www.smslit.top/daily/</link>
		<description>Recent content in Dailies on SMSLIT</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Thu, 21 Mar 2019 23:22:56 +0800</lastBuildDate>
		<atom:link href="https://www.smslit.top/daily/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>意外的惊喜: vim 有 lsp 加持</title>
			<link>https://www.smslit.top/daily/languange-server-protocol/</link>
			<pubDate>Thu, 21 Mar 2019 23:22:56 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/languange-server-protocol/</guid>
			<description>昨天朋友邮件分享给十里一个链接，不要太优秀，那就是 LSP ，什么是 LSP？ The Language Server protocol is used between a tool (the client) and a language smartness provider (the server) to integrate features like auto complete, go to definition, find all references and alike into the tool. 为</description>
			<content type="html"><![CDATA[<p>昨天朋友邮件分享给十里一个链接，不要太优秀，那就是 LSP ，什么是 LSP？</p>

<blockquote>
<p>The Language Server protocol is used between a tool (the client) and a language smartness provider (the server) to integrate features like auto complete, go to definition, find all references and alike into the tool.</p>
</blockquote>

<p>为什么会存在这个东西，算了，我也不搬运别人的话了，这里是<a href="https://langserver.org/" target="_blank">传送门</a>。简单来说，有了它，能实现语言服务和编辑器之间协作的大一统，LSP 打通了 LS 与编辑器，那么像上古神器 vim 以及神的编辑器 emacs&hellip;..只要是编辑器有 LSP 的加持都能轻松实现代码补全、定义和声明跳转、语法检查、代码格式化、重命名(用于重构)以及查看引用等，简直不要太 high！因为朋友和我都是使用 vim，所以花了一早上便研究了一下 python 和 swift 的 LSP 配置和使用。</p>

<ul>
<li><a href="https://github.com/prabirshrestha/vim-lsp" target="_blank">vim-lsp</a></li>
</ul>

<p>vim 的 LSP 配置看上面这个 vim-lsp 就够了， README 和 wiki 中一定可以找到常用编程语言的支持。</p>

<p>不过，还是存在一些问题的，我配置了 python 和 swift 两种语言的 LSP，各种跳转很优秀，语法检查也不错，就是代码补全和代码格式化有些问题！不知道是不是我的 vim 的问题还是什么，补全弹窗出现的慢，尤其是 swift 的补全，竟然会卡代码，我晕～ python 的代码格式化简直不要太迷幻，总之套路不详！python 的代码补全、语法检查和代码格式化又退回到了原来的插件组合和配置，有时间再研究一下 vim-lsp &hellip;</p>

<ul>
<li>python 补全: <a href="https://github.com/maralla/completor.vim" target="_blank">completor</a> + jedi</li>
<li>python 语法检查和代码格式化: <a href="https://github.com/w0rp/ale" target="_blank">ale</a> + pylint 和 autopep8</li>
<li>python 代码跳转、查看引用和重构: <a href="https://github.com/prabirshrestha/vim-lsp" target="_blank">vim-lsp</a> 和 <a href="https://github.com/prabirshrestha/async.vim" target="_blank">async.vim</a> + <a href="https://github.com/palantir/python-language-server" target="_blank">python language server</a></li>
</ul>

<p>感觉也有可能是 python 的 LS 工具的原因，后面尝试一下微软的 <a href="ihttps://github.com/Microsoft/python-language-server" target="_blank">python language server</a>!</p>
]]></content>
		</item>
		
		<item>
			<title>懵逼状态</title>
			<link>https://www.smslit.top/daily/question-mark-fill-head/</link>
			<pubDate>Wed, 20 Mar 2019 23:06:11 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/question-mark-fill-head/</guid>
			<description>今天学习了下唐老师的《Vue 开发实战》已更新的视频课，我的天，虽然已经粗略看了一遍 Vue 的官方教程，但是担心的事情还是发生了！在看 Vue 官方教程的时</description>
			<content type="html"><![CDATA[<p>今天学习了下唐老师的《Vue 开发实战》已更新的视频课，我的天，虽然已经粗略看了一遍 Vue 的官方教程，但是担心的事情还是发生了！在看 Vue 官方教程的时候，就发现概念很多，脑袋塞得满满的，俨然成了一个先进先出的队列，很早看过的还是会忘记一些，果然填鸭式地学习（爆发式吸收）还是挺熬人的，可能是因为唐老师的课干货比较多，很精炼，但是很多还是不能立即明白和吸收，还是得课后好好补课，看教程的过程中经常是下面的状态：</p>

<figure>
    <img src="https://pichome-1254392422.cos.ap-chengdu.myqcloud.com/img/2019-03-21-th.jpeg" width="200px"/> 
</figure>


<p>革命尚未成功，同志仍需努力！</p>
]]></content>
		</item>
		
		<item>
			<title>甘作小众</title>
			<link>https://www.smslit.top/daily/be-a-small-potato/</link>
			<pubDate>Tue, 19 Mar 2019 22:31:50 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/be-a-small-potato/</guid>
			<description>今天看知乎想法有人说： 从统计数据上看，在网上发『干货』远没有发『鸡汤』来得受欢迎。 拿知乎来说，干货几十个赞，鸡汤几百上千个赞。慢慢也就没人发</description>
			<content type="html"><![CDATA[<p>今天看知乎想法有人说：</p>

<blockquote>
<p>从统计数据上看，在网上发『干货』远没有发『鸡汤』来得受欢迎。</p>

<p>拿知乎来说，干货几十个赞，鸡汤几百上千个赞。慢慢也就没人发干货了。</p>
</blockquote>

<p>其实，在乎这些干什么，一定要追求流量吗？流量很重要，但也不是唯一的王道嘛！十里觉得，做好小众，沉心打造自己一番小天地，别人看到如果喜欢那很好，就一起交流嘛，如果不以为然，也不要放在心上，坚持做好自己。不管你看与不看，我都在！</p>

<p>就是这样！安静的打磨自己&hellip;</p>
]]></content>
		</item>
		
		<item>
			<title>投怀 Vue</title>
			<link>https://www.smslit.top/daily/vue-vue-vue/</link>
			<pubDate>Mon, 18 Mar 2019 21:21:06 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/vue-vue-vue/</guid>
			<description>说来太巧了，从前天晚上开始看 Vue 官网教程学习 Vue，今天就发现卖桃君在公众号发了宣布极客时间新推出 Vue 视频教程进行大甩卖的文章，只感叹这就是一个</description>
			<content type="html"><![CDATA[<p>说来太巧了，从前天晚上开始看 Vue 官网教程学习 Vue，今天就发现卖桃君在公众号发了宣布极客时间新推出 Vue 视频教程进行大甩卖的文章，只感叹这就是一个“阴谋”！因为之前订阅了戴铭老师的《iOS 开发高手课》的教程，感受到了极客时间对于教程质质量的把控，所以应自己所需，立马剁手订阅了唐金州老师<sup class="footnote-ref" id="fnref:Ant-Design-Vue"><a href="#fn:Ant-Design-Vue">1</a></sup>的《Vue 开发实战》的课程，可惜甩卖活动不能使用之前的 30 刀的券，但无所谓了，优良的知识是无价的，这些投资是有必要的！如果您也想了解一下课程，扫码就看：</p>

<figure>
    <img src="https://pichome-1254392422.cos.ap-chengdu.myqcloud.com/img/2019-03-18-06ffd0319ac755538a585fa74e9e035e.jpg" width="300px"/> 
</figure>

<div class="footnotes">

<hr />

<ol>
<li id="fn:Ant-Design-Vue">一点资讯前端技术专家，Ant Design Vue 的作者 <a class="footnote-return" href="#fnref:Ant-Design-Vue"><sup>[return]</sup></a></li>
</ol>
</div>
]]></content>
		</item>
		
		<item>
			<title>头号玩家</title>
			<link>https://www.smslit.top/daily/ready-player-one/</link>
			<pubDate>Sun, 17 Mar 2019 22:55:12 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/ready-player-one/</guid>
			<description>昨天和今天终于看完了斯皮尔伯格的新电影《头号玩家》，也不算新电影了，因为上映了都一年多了，尴尬！两个多小时的电影花两天看完不过分吧，还是说说</description>
			<content type="html"><![CDATA[<p>昨天和今天终于看完了斯皮尔伯格的新电影《头号玩家》，也不算新电影了，因为上映了都一年多了，尴尬！两个多小时的电影花两天看完不过分吧，还是说说观后感吧！这部电影应该是会给某一代人带来猛烈回忆杀的，很羞愧的说，只有红白机游戏和一些动漫形象对十里有点&rdquo;伤害&rdquo;，童年记忆嘛，电影里那些像素游戏也没怎么玩过😅！十里对电影中那句 “The reality is the only thing that&rsquo;s real” 记忆尤为深刻，现实是唯一的真实！虚幻之外，游戏之外，身边的人、物、景才是最真实的，拥抱生活，感受生活的人情感和状态才会是饱满的，这又让十里想到专注之余能自由穿梭于自己的世界与现实世界是多么的重要！</p>

<p>除了电影特效带来的快感，十里还惊叹于男主是那么的了解绿洲的缔造者，每个细节的那种默契跨越了年龄，也跨越了虚拟与现实，时间与空间都无法掩盖两个人的相同关注点！那么世界上真的会存在如此了解你并与你很合拍的人吗？</p>
]]></content>
		</item>
		
		<item>
			<title>关于 macOS 开发知识分享</title>
			<link>https://www.smslit.top/daily/macOS-dev-plan-change/</link>
			<pubDate>Sat, 16 Mar 2019 23:56:00 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/macOS-dev-plan-change/</guid>
			<description>已经有好些天没有发 macOS 开发的经验分享了，考虑到现阶段时间的紧俏，更改知识分享周期为 weekly。其实每一篇分享背后，十里要做很多工作，十里想着</description>
			<content type="html"><![CDATA[<p>已经有好些天没有发 macOS 开发的经验分享了，考虑到现阶段时间的紧俏，更改知识分享周期为 weekly。其实每一篇分享背后，十里要做很多工作，十里想着要尽量能说清楚做什么，怎么做，为什么（what-how-why），能力有限，时间就会占用很多，毕竟还要做很多其他事情，索性 《macOS 开发》(博客和知乎专栏)就成了《macOS Development weekly》，哈哈！</p>

<p>关于经验分享，还是想尽量时新，参照网上老旧的开发经验也要关注和探索技术的更新，就比如十里下一篇要讲的本地通知，网上提供的方法大多是马上要废弃的方式，阅读 apple 官方关于 Notification 的开发资料才知道未来 API 的发展方向，去年 WWDC 已经很清楚说了 iOS 应用移植到 macOS 的计划，作为开发者也应注意到了 apple 正努力融合 iOS 和 macOS 开发接口，得时刻关注动向，才能让自己的作品与时俱进！知识经验的分享也便能时新！</p>
]]></content>
		</item>
		
		<item>
			<title>鸭子类型是什么鬼</title>
			<link>https://www.smslit.top/daily/duck-type/</link>
			<pubDate>Fri, 15 Mar 2019 23:44:26 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/duck-type/</guid>
			<description>刚刚看到 《Python Vs Go，鸭子类型，你有我也有》 了解到 鸭子类型，刚看到标题的时候，怪怪的，这是个什么鬼类型！而且总感觉 PegasusWang 稍微开了开车，哈</description>
			<content type="html"><![CDATA[<p>刚刚看到 <a href="https://zhuanlan.zhihu.com/p/59299729" target="_blank">《Python Vs Go，鸭子类型，你有我也有》</a> 了解到 <strong>鸭子类型</strong>，刚看到标题的时候，怪怪的，这是个什么鬼类型！而且总感觉 <a href="https://www.zhihu.com/people/pegasus-wang/activities" target="_blank">PegasusWang</a> 稍微开了开车，哈哈！</p>

<p>在程序设计中，鸭子类型（英语：duck typing）是动态类型的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由&rdquo;当前方法和属性的集合&rdquo;决定。这个概念的名字来源于由James Whitcomb Riley提出的鸭子测试，“鸭子测试”可以这样表述：</p>

<blockquote>
<p>当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。<sup class="footnote-ref" id="fnref:https-zh-wikiped"><a href="#fn:https-zh-wikiped">1</a></sup></p>
</blockquote>

<p>很明显在这里，我们更关注的是对象的行为而不是它们的类型。</p>

<p>举个🌰，定义一个鸭子类，其有个 <strong>叫</strong> 方法，在定义一个人类(有一种男人被称为“🦆”)，他也有 <strong>叫</strong> 的方法，总感觉好搞笑！这里我们就可以认为它们都有叫的方法，都是鸭子的行为，所以都是鸭子！Python 试一下：</p>
<div class="highlight"><pre class="chroma"><code class="language-Python" data-lang="Python"><span class="k">class</span> <span class="nc">Duck</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

    <span class="k">def</span> <span class="nf">quack</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;呱呱&#34;</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Man</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>

    <span class="k">def</span> <span class="nf">quack</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;女王大人&#34;</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">do_quack</span><span class="p">(</span><span class="n">ducker</span><span class="p">):</span>
    <span class="n">ducker</span><span class="o">.</span><span class="n">quack</span><span class="p">()</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">d</span> <span class="o">=</span> <span class="n">Duck</span><span class="p">(</span><span class="s1">&#39;duck&#39;</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">Man</span><span class="p">(</span><span class="s1">&#39;man&#39;</span><span class="p">)</span>
    <span class="n">do_quack</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
    <span class="n">do_quack</span><span class="p">(</span><span class="n">m</span><span class="p">)</span></code></pre></div>
<p><a href="https://www.zhihu.com/people/pegasus-wang/activities" target="_blank">PegasusWang</a> 还用 Go 语言试了一下，使用了 interface 特性，咦！这与 swift 语言中的协议(protocol) 很像嘛，那咱用 swift 实现一下：</p>
<div class="highlight"><pre class="chroma"><code class="language-Swift" data-lang="Swift"><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="kd">protocol</span> <span class="nc">Ducker</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">quack</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Duck</span><span class="p">:</span> <span class="n">Ducker</span> <span class="p">{</span>
    
    <span class="kd">var</span> <span class="nv">name</span><span class="p">:</span> <span class="nb">String</span>
    
    <span class="kd">init</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">name</span> <span class="p">=</span> <span class="n">name</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">quack</span><span class="p">()</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;呱呱&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Man</span><span class="p">:</span> <span class="n">Ducker</span> <span class="p">{</span>
    
    <span class="kd">var</span> <span class="nv">name</span><span class="p">:</span> <span class="nb">String</span>
    
    <span class="kd">init</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">name</span> <span class="p">=</span> <span class="n">name</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">quack</span><span class="p">()</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&#34;女王大人&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">doQuack</span><span class="p">(</span><span class="n">ducker</span><span class="p">:</span> <span class="n">Ducker</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ducker</span><span class="p">.</span><span class="n">quack</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">d</span> <span class="p">=</span> <span class="n">Duck</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&#34;duck&#34;</span><span class="p">)</span>
<span class="kd">let</span> <span class="nv">m</span> <span class="p">=</span> <span class="n">Man</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&#34;man&#34;</span><span class="p">)</span>

<span class="n">doQuack</span><span class="p">(</span><span class="n">ducker</span><span class="p">:</span> <span class="n">d</span><span class="p">)</span>
<span class="n">doQuack</span><span class="p">(</span><span class="n">ducker</span><span class="p">:</span> <span class="n">m</span><span class="p">)</span></code></pre></div>
<p>最终我们都能听见 duck 和 man 的叫声，Nice！</p>
<div class="highlight"><pre class="chroma"><code class="language-Bash" data-lang="Bash">呱呱
女王大人</code></pre></div><div class="footnotes">

<hr />

<ol>
<li id="fn:https-zh-wikiped">在鸭子类型中，关注点在于对象的行为，能作什么；而不是关注对象所属的类型。&ndash;<a href="https://zh.wikipedia.org/wiki/鸭子类型" target="_blank">鸭子类型</a> <a class="footnote-return" href="#fnref:https-zh-wikiped"><sup>[return]</sup></a></li>
</ol>
</div>
]]></content>
		</item>
		
		<item>
			<title>很对味的收获</title>
			<link>https://www.smslit.top/daily/amazing-ui-component/</link>
			<pubDate>Fri, 15 Mar 2019 22:05:11 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/amazing-ui-component/</guid>
			<description>今天看 Jason 博客文章，收获挺多。 首先是解决了最近一直纠结的问题，web 开发前后端分离的技术栈的选择，看了很多 angular\rect\vue 大战的文章，但最终还是受教于 Jason 选择</description>
			<content type="html"><![CDATA[<p>今天看 <a href="https://atjason.com" target="_blank">Jason</a> 博客文章，收获挺多。</p>

<p>首先是解决了最近一直纠结的问题，web 开发前后端分离的技术栈的选择，看了很多 angular\rect\vue 大战的文章，但最终还是受教于 Jason 选择了 Flask + Vue + Element 的技术栈，严格地说应该是 Flask + Vue，Element 是一个非常棒的 UI 组件库，天生与 Vue 配套，除了省很多学习成本，还因为真的喜欢 Element 的 UI 风格，棒棒的！Vue 学习ing&hellip;</p>

<p>关于《不能复制时间的事，少做》还是有些启发的，为了发挥自己的价值，尽量把时间花在更有广泛影响力的产品或事情上，当然这与<strong>利基市场</strong>也不会冲突！服务小众，最大化自己的价值！</p>

<p>PS: 学了一下午的 Vue，真的很对味口，道不出的一种舒服！</p>
]]></content>
		</item>
		
		<item>
			<title>君子爱财，取之有道</title>
			<link>https://www.smslit.top/daily/money-money-lie/</link>
			<pubDate>Thu, 14 Mar 2019 23:57:09 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/money-money-lie/</guid>
			<description>今天看了一期米奇沃克斯的 Vlog 《当产品融资变得如此随意，打工族怎么活？》，里面他描述了自己的一些购买融资产品经历以及合作经历，其中一个很夸张的例</description>
			<content type="html"><![CDATA[<p>今天看了一期米奇沃克斯的 Vlog 《当产品融资变得如此随意，打工族怎么活？》，里面他描述了自己的一些购买融资产品经历以及合作经历，其中一个很夸张的例子就是一群高市场和营销的非技术人员拿一款语音产品（bug 满满）通过融资的方式敛财十几亿人民币，由此米奇沃克斯阐述了一些自己的思考。赚钱的方式有很多种，而很多人通过快速敛财的方式，来投资洗白，尤其是在国外融资的，往往就是在搞臭中国人的口碑，这其实是对一个正常融资环境的污染，这让那些想做好产品又只能靠融资发展的个体或公司身处一个并不公平的竞争条件下，也扼杀了一些好的创意和产品！</p>

<p>米奇沃克斯在视频最后说到，真的希望会出现一些并不是以赚钱为目的的人出现&hellip;十里觉得君子爱财取之有道，他这种期待应该补充一下：真的希望多出现一些愿意做好产品并且能对消费者负责人的人或公司出现，赚钱要让消费者觉得值得，最起码要等价交换，让消费者有超值回报感最好！</p>

<p>想起了农村里村干部的事情，从小就觉得村干部贪得无厌，很多人削尖了脑袋要往里钻！这些人蝇营狗苟，看到的只是钱途，却没有觉得当上村干部身上多了一个重担，缺少对村民负责的意识！个人觉得没有绝对大公无私的好村官，也不会抱以期待这种人的出现。但一定存在很智慧得民心的干部，他们为人民办实事，给村民挣福利，同时合理利用自己身份优势经营自己的事业！</p>

<p>PS: 理想还是要有的，但需要让现实来调剂！</p>
]]></content>
		</item>
		
		<item>
			<title>别致的音乐盒</title>
			<link>https://www.smslit.top/daily/music-box-share-to-you/</link>
			<pubDate>Wed, 13 Mar 2019 22:17:49 +0800</pubDate>
			
			<guid>https://www.smslit.top/daily/music-box-share-to-you/</guid>
			<description>不知道大家平常用不用网易云音乐，如果您是软件开发人员并且使用 vscode 的话，向您推荐一个 vscode 插件-VSC Netease Music!不过今天十里真正要分享的是一个命</description>
			<content type="html"><![CDATA[<p>不知道大家平常用不用网易云音乐，如果您是软件开发人员并且使用 vscode 的话，向您推荐一个 vscode 插件-<a href="https://github.com/nondanee/vsc-netease-music" target="_blank">VSC Netease Music</a>!不过今天十里真正要分享的是一个命令行下的网易云音乐客户端，喜欢在终端搬砖又要听音乐的同胞的开心与喜悦呀！其实十里已经用了两年多了，感觉挺不错的，有必要分享出来，感谢作者！它就是 <a href="https://github.com/darknessomi/musicbox" target="_blank">darknessomi/musicbox</a> ，因为作者使用 python 实现并且托到了 pip，所以安装很简单。</p>

<blockquote>
<p>高品质网易云音乐命令行版本，简洁优雅，丝般顺滑，基于Python编写</p>
</blockquote>

<p>在 macOS 下安装只需要安装一个依赖，然后安装 musicbox ，开箱即用：</p>
<div class="highlight"><pre class="chroma"><code class="language-Bash" data-lang="Bash"><span class="c1"># 安装依赖</span>
brew install mpg123
<span class="c1"># 安装 musicbox</span>
pip3 install NetEase-MusicBox
<span class="c1"># 运行 musicbox</span>
musicbox</code></pre></div>
<p>音乐盒的操作倾向 vim 使用者的操作习惯：</p>

<figure>
    <img src="https://pichome-1254392422.cos.ap-chengdu.myqcloud.com/img/20190314103710.png" width="70%"/> 
</figure>

]]></content>
		</item>
		
	</channel>
</rss>
